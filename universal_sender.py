#!/usr/bin/env python3
# -*- coding: utf-8 -*- 

import asyncio
import smtplib
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog, simpledialog
import pandas as pd
import logging
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from pyrogram import Client
from pyrogram.errors import (
    SessionPasswordNeeded,
    PhoneNumberInvalid,
    PhoneCodeInvalid, 
    PhoneCodeExpired,
    PasswordHashInvalid,
    FloodWait,
    BadRequest
)
import threading
import os
import json
import math
import random
import colorsys
import mimetypes
from email.mime.application import MIMEApplication
from email.mime.image import MIMEImage
from email.mime.audio import MIMEAudio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('universal_sender.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class ThemeManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, root):
        self.root = root
        self.is_dark = False
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        self.light_theme = {
            'bg': '#ffffff',
            'fg': "#0A0A0A",
            'select_bg': '#0078d4',
            'select_fg': '#ffffff',
            'entry_bg': '#ffffff',
            'entry_fg': "#000000",
            'button_bg': '#f0f0f0',
            'frame_bg': '#f5f5f5',
            'text_bg': '#ffffff',
            'disabled_fg': '#666666',
            'log_bg': '#f8f8f8'
        }
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.dark_theme = {
            'bg': "#4d4c4c",
            'fg': '#e0e0e0', 
            'select_bg': '#404040',
            'select_fg': '#ffffff',
            'entry_bg': '#333333',
            'entry_fg': '#ffffff',
            'button_bg': '#404040',
            'frame_bg': '#1e1e1e',     # –£–±–∏—Ä–∞–µ–º —Å–≤–µ—Ç–ª—ã–µ —Ñ—Ä–µ–π–º—ã - —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç —á—Ç–æ –∏ bg
            'text_bg': '#2a2a2a',
            'disabled_fg': '#cccccc',
            'log_bg': '#252525'
        }
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        self.is_dark = not self.is_dark
        self.apply_theme()
        return "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è" if self.is_dark else "üåô –¢–µ–º–Ω–∞—è"
    
    def get_current_theme(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É"""
        return self.dark_theme if self.is_dark else self.light_theme
    
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        theme = self.get_current_theme()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –æ–∫–Ω—É
        self.root.configure(bg=theme['bg'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è ttk –≤–∏–¥–∂–µ—Ç–æ–≤
        style = ttk.Style()
        
        if self.is_dark:
            style.theme_use('clam')
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            style.configure('TLabel', 
                        background=theme['bg'], 
                        foreground=theme['fg'])
            
            style.configure('TFrame', 
                        background=theme['bg'])
            
            # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ LabelFrame
            style.configure('TLabelFrame', 
                        background=theme['bg'],        # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
                        foreground=theme['fg'],        # –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        relief='flat',
                        borderwidth=0,                 # –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                        labeloutside=False)            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–Ω—É—Ç—Ä–∏
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±–ª–∞—Å—Ç–∏ LabelFrame
            style.configure('TLabelFrame.Label',
                        background=theme['bg'],        # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                        foreground=theme['fg'])        # –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
            style.configure('TButton', 
                        background=theme['button_bg'], 
                        foreground=theme['fg'],
                        relief='flat',
                        borderwidth=0,
                        focuscolor='none')
            
            style.map('TButton',
                    background=[('active', '#505050'),
                                ('pressed', '#353535')])
            
            style.configure('TEntry', 
                        fieldbackground=theme['entry_bg'], 
                        foreground=theme['entry_fg'],
                        bordercolor=theme['entry_bg'],
                        insertcolor=theme['fg'],
                        relief='flat',
                        borderwidth=1)
            
            style.configure('TCheckbutton', 
                        background=theme['bg'], 
                        foreground=theme['fg'],
                        focuscolor='none')
            
            style.configure('TRadiobutton', 
                        background=theme['bg'], 
                        foreground=theme['fg'],
                        focuscolor='none')
            
            style.configure('TNotebook', 
                        background=theme['bg'],
                        borderwidth=0)
            
            style.configure('TNotebook.Tab', 
                        background=theme['button_bg'], 
                        foreground=theme['fg'],
                        padding=[12, 6],
                        relief='flat')
            
            style.map('TNotebook.Tab',
                    background=[('selected', '#505050')])
                    
            style.configure('TScale',
                        background=theme['bg'],
                        troughcolor=theme['entry_bg'],
                        sliderrelief='flat')
                        
            style.configure('TProgressbar',
                        background='#404040',
                        troughcolor=theme['entry_bg'],
                        borderwidth=0,
                        relief='flat')
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
            style.theme_use('default')

class UniversalSenderConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    def __init__(self):
        self.config_file = 'config.json'
        self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_config = {
            'telegram': {
                'api_id': 00000000,
                'api_hash': 'PAST_HASH_HERE',
                'session_name': 'universal_sender'
            },
            'email': {
                'provider': 'custom',
                'smtp_server': 'smtp.zoho.eu',
                'smtp_port': 587,
                'use_tls': True,
                'username': 'test-rassilka@zohomail.eu',
                'password': '9GETXTPXaBD9'
            },
            'sending': {
                'delay_seconds': 1.0,
                'send_telegram': True,
                'send_email': True
            },
            'message': {
                'subject': '–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                'template': '''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.

–í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'''
            },
            'smtp_presets': {
                'gmail': {
                    'smtp_server': 'smtp.gmail.com',
                    'smtp_port': 587,
                    'use_tls': True
                },
                'yandex': {
                    'smtp_server': 'smtp.yandex.ru',
                    'smtp_port': 587,
                    'use_tls': True
                },
                'mailru': {
                    'smtp_server': 'smtp.mail.ru',
                    'smtp_port': 587,
                    'use_tls': True
                },
                'zoho': {
                    'smtp_server': 'smtp.zoho.eu',
                    'smtp_port': 587,
                    'use_tls': True
                }
            }
        }
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
                    for key in default_config:
                        if key in loaded_config:
                            if isinstance(default_config[key], dict):
                                default_config[key].update(loaded_config[key])
                            else:
                                default_config[key] = loaded_config[key]
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        self.config = default_config
        self.save_config()
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

class DataProcessor:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
    
    @staticmethod
    def load_excel_file(file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            df_raw = pd.read_excel(file_path, header=None)
            logging.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df_raw)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            header_row = None
            for i in range(min(5, len(df_raw))):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                row_values = df_raw.iloc[i].astype(str).str.lower()
                
                # –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                keywords = ['username', 'tg', 'telegram', 'name', 'email', 'fio', '–§–ò–û'.lower()]
                matches = sum(1 for val in row_values if any(keyword in val for keyword in keywords))
                
                if matches >= 2:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ 2+ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
                    header_row = i
                    logging.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {i + 1}")
                    break
            
            if header_row is None:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                logging.warning("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É")
                header_row = 0
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            df = pd.read_excel(file_path, header=header_row)
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            df.columns = df.columns.astype(str).str.strip()
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df.dropna(how='all')
            
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
            logging.info("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
            for i, col in enumerate(df.columns):
                logging.info(f"  {i+1}. '{col}'")
            
            return df
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            raise
    
    @staticmethod
    def process_contacts(df):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            telegram_col = DataProcessor.find_column(df, [
                'username', 'tg name', 'tg_name', 'telegram', 'nick', 'Username'
            ])
            
            email_col = DataProcessor.find_column(df, [
                'email', 'mail', '–ø–æ—á—Ç–∞', 'e-mail', 'Email'
            ])
            
            name_col = DataProcessor.find_column(df, [
                'fio', '–∏–º—è', 'name', '–§–ò–û', 'Name', 'FIO', 'TG Name'
            ])
            
            logging.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: TG='{telegram_col}', Email='{email_col}', Name='{name_col}'")
            
            contacts = []
            
            for index, row in df.iterrows():
                try:
                    contact = {
                        'name': DataProcessor.get_safe_value(row, name_col, f'–ö–æ–Ω—Ç–∞–∫—Ç_{index+1}'),
                        'telegram': DataProcessor.get_safe_value(row, telegram_col, ''),
                        'email': DataProcessor.get_safe_value(row, email_col, ''),
                        'row_number': index + 1
                    }
                    
                    # –û—á–∏—Å—Ç–∫–∞ telegram username
                    if contact['telegram']:
                        tg_value = str(contact['telegram']).strip()
                        if tg_value and tg_value.lower() not in ['nan', 'none', '']:
                            # –ï—Å–ª–∏ —ç—Ç–æ TG ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            if tg_value.isdigit():
                                contact['telegram'] = ''
                                logging.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º TG ID {tg_value} –¥–ª—è {contact['name']}")
                            # –ï—Å–ª–∏ —ç—Ç–æ username –±–µ–∑ @, –¥–æ–±–∞–≤–ª—è–µ–º @
                            elif not tg_value.startswith('@'):
                                contact['telegram'] = '@' + tg_value
                            else:
                                contact['telegram'] = tg_value
                        else:
                            contact['telegram'] = ''
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏
                    if contact['telegram'] or contact['email']:
                        contacts.append(contact)
                        
                except Exception as row_error:
                    logging.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {row_error}")
                    continue
            
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return contacts
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            raise
    
    @staticmethod
    def find_column(df, keywords):
        """–ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for keyword in keywords:
            for col in df.columns:
                if col.lower() == keyword.lower():
                    return col
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for keyword in keywords:
            for col in df.columns:
                if keyword.lower() in col.lower():
                    return col
        return None
    
    @staticmethod
    def get_safe_value(row, column, default=''):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if column is None:
            return default
        
        value = row.get(column, default)
        if pd.isna(value):
            return default
        
        return str(value).strip()

class TelegramSender:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self, config):
        self.config = config['telegram']
        self.app = None
        self.session_file = f"{self.config['session_name']}.session"
    
    def is_session_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏"""
        exists = os.path.exists(self.session_file)
        return exists
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.app = Client(
                self.config['session_name'],
                api_id=self.config['api_id'],
                api_hash=self.config['api_hash']
            )
            
            logging.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await self.app.start()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            me = await self.app.get_me()
            if me:
                logging.info(f"‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username or '–±–µ–∑ username'})")
                return True
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
            # –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            if os.path.exists(self.session_file):
                try:
                    os.remove(self.session_file)
                    logging.info("üóëÔ∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω")
                except:
                    pass
            return False
    
    async def send_message(self, username, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not self.app:
                logging.error("‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            if not username or not username.startswith('@'):
                logging.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username: {username}")
                return False

            await self.app.send_message(username, message)
            logging.info(f"‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {username}")
            return True

        except Exception as e:
            err = str(e)
            if "USERNAME_NOT_OCCUPIED" in err:
                logging.error(f"‚ùå Username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {username}")
            elif "PRIVACY" in err or "privacy" in err.lower():
                logging.error(f"‚ö†Ô∏è {username} –∑–∞–ø—Ä–µ—Ç–∏–ª –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
            elif "FLOOD_WAIT" in err:
                logging.error(f"‚è≥ Flood wait –¥–ª—è {username}")
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram {username}: {e}")
            return False
        
    async def send_message_with_attachment(self, username, message, attachment_path=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–ª–æ–∂–µ–Ω–∏–µ–º –≤ Telegram"""
        try:
            if not self.app:
                logging.error("‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            if not username or not username.startswith('@'):
                logging.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username: {username}")
                return False

            if attachment_path and os.path.exists(attachment_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–∞–π–ª–æ–º
                await self.app.send_document(username, attachment_path, caption=message)
                logging.info(f"‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {username}")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.app.send_message(username, message)
                logging.info(f"‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {username}")
            
            return True

        except Exception as e:
            err = str(e)
            if "USERNAME_NOT_OCCUPIED" in err:
                logging.error(f"‚ùå Username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {username}")
            elif "PRIVACY" in err or "privacy" in err.lower():
                logging.error(f"‚ö†Ô∏è {username} –∑–∞–ø—Ä–µ—Ç–∏–ª –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
            elif "FLOOD_WAIT" in err:
                logging.error(f"‚è≥ Flood wait –¥–ª—è {username}")
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram {username}: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.app:
            try:
                await self.app.stop()
                logging.info("üîå Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Telegram: {e}")

    def get_session_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏"""
        if not self.is_session_exists():
            return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        try:
            size = os.path.getsize(self.session_file)
            if size < 100:
                return "‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è"
            
            mtime = os.path.getmtime(self.session_file)
            date_str = datetime.fromtimestamp(mtime).strftime("%d.%m.%Y %H:%M")
            return f"‚úÖ –°–µ—Å—Å–∏—è –æ—Ç {date_str}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"

class TelegramAuthWindow:
    """–û–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram"""
    
    def __init__(self, parent, config, theme_manager):
        self.parent = parent
        self.config = config
        self.theme_manager = theme_manager
        self.window = None
        self.result = False
        self.loop = None
        self.auth_thread = None
        
    def show_auth(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.window = tk.Toplevel(self.parent)
        self.window.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram")
        self.window.geometry("450x350")
        self.window.resizable(False, False)
        
        theme = self.theme_manager.get_current_theme()
        self.window.configure(bg=theme['bg'])
        
        self.center_window()
        self.window.transient(self.parent)
        self.window.grab_set()
        self.create_auth_interface()
        self.window.wait_window()
        return self.result
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x = (screen_width - 450) // 2
        y = (screen_height - 350) // 2
        self.window.geometry(f"450x350+{x}+{y}")
    
    def create_auth_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        main_frame = ttk.Frame(self.window)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        ttk.Label(main_frame, text="üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram", 
                 font=('Arial', 14, 'bold')).pack(pady=(0, 20))
        
        instruction_text = """–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.

1. –ü–æ–ª—É—á–∏—Ç–µ API ID –∏ Hash –Ω–∞ my.telegram.org
2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "API development tools"
3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram"""
        
        ttk.Label(main_frame, text=instruction_text, 
                 font=('Arial', 10), justify='left').pack(pady=(0, 20))
        
        fields_frame = ttk.Frame(main_frame)
        fields_frame.pack(fill='x', pady=(0, 20))
        
        ttk.Label(fields_frame, text="API ID:").grid(row=0, column=0, sticky='w', pady=5)
        self.api_id_var = tk.StringVar(value=str(self.config['telegram']['api_id']))
        ttk.Entry(fields_frame, textvariable=self.api_id_var, width=40).grid(row=0, column=1, padx=(10, 0), pady=5)
        
        ttk.Label(fields_frame, text="API Hash:").grid(row=1, column=0, sticky='w', pady=5)
        self.api_hash_var = tk.StringVar(value=self.config['telegram']['api_hash'])
        ttk.Entry(fields_frame, textvariable=self.api_hash_var, width=40).grid(row=1, column=1, padx=(10, 0), pady=5)
        
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill='x', pady=20)
        
        ttk.Button(buttons_frame, text="üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", 
                  command=self.start_auth).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                  command=self.cancel_auth).pack(side='right', padx=5)
        
        self.status_label = ttk.Label(main_frame, text="–ì–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 
                                     font=('Arial', 10), foreground='blue')
        self.status_label.pack(pady=10)
    
    def start_auth(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            api_id = int(self.api_id_var.get().strip())
            api_hash = self.api_hash_var.get().strip()
            
            if not api_id or not api_hash:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", parent=self.window)
                return

            phone_number = simpledialog.askstring("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                             "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã):\n–ü—Ä–∏–º–µ—Ä: +71234567890",
                                             parent=self.window)
            
            if not phone_number:
                self.status_label.config(text="‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", foreground='red')
                return

            self.config['telegram']['api_id'] = api_id
            self.config['telegram']['api_hash'] = api_hash
            
            self.status_label.config(text="–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...", foreground='orange')
            self.window.update()
            
            self.auth_thread = threading.Thread(target=self.run_auth_loop, args=(phone_number,))
            self.auth_thread.daemon = True
            self.auth_thread.start()
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", parent=self.window)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", parent=self.window)

    async def ask_string_async(self, title, prompt, show=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ simpledialog"""
        future = self.loop.create_future()
        
        def ask():
            result = simpledialog.askstring(title, prompt, parent=self.window, show=show)
            self.loop.call_soon_threadsafe(future.set_result, result)

        self.window.after(0, ask)
        return await future

    def run_auth_loop(self, phone_number):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        try:
            self.loop.run_until_complete(self.perform_auth(phone_number))
        except Exception as e:
            error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
            self.window.after(0, self.status_label.config, {'text': error_message, 'foreground': 'red'})
        finally:
            self.loop.close()

    async def perform_auth(self, phone_number):
        """–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        app = None
        try:
            app = Client(
                self.config['telegram']['session_name'],
                api_id=self.config['telegram']['api_id'],
                api_hash=self.config['telegram']['api_hash']
            )

            self.window.after(0, self.status_label.config,
                            {'text': "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", 'foreground': 'orange'})
            await app.connect()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            self.window.after(0, self.status_label.config,
                            {'text': "–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞...", 'foreground': 'orange'})
            sent_code = await app.send_code(phone_number)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥
            code = await self.ask_string_async(
                "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram –∏–ª–∏ SMS:"
            )
            if not code:
                self.window.after(0, self.status_label.config,
                                {'text': "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 'foreground': 'red'})
                return

            self.window.after(0, self.status_label.config,
                {'text': "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...", 'foreground': 'orange'})
            
            try:
                await app.sign_in(phone_number, sent_code.phone_code_hash, code.strip().replace(" ", ""))
                
            except SessionPasswordNeeded:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å 2FA
                self.window.after(0, self.status_label.config,
                                {'text': "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA...", 'foreground': 'blue'})
                
                password = await self.ask_string_async(
                    "–ü–∞—Ä–æ–ª—å 2FA",
                    "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                    show="*"
                )
                if not password:
                    self.window.after(0, self.status_label.config,
                                    {'text': "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 'foreground': 'red'})
                    return
                
                self.window.after(0, self.status_label.config,
                                {'text': "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 2FA...", 'foreground': 'orange'})
                await app.check_password(password)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            me = await app.get_me()
            self.window.after(0, self.status_label.config,
                            {'text': f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! ({me.first_name})", 'foreground': 'green'})
            self.result = True
            self.window.after(1500, self.close_auth)

        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞: {e}"
            self.window.after(0, self.status_label.config,
                            {'text': error_message, 'foreground': 'red'})
            self.result = False
        finally:
            if app and app.is_connected:
                await app.disconnect()

    def cancel_auth(self):
        """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.result = False
        self.close_auth()

    def close_auth(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if self.window:
            self.window.destroy()

class EmailSender:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ email"""
    
    def __init__(self, config):
        self.config = config['email']
        
    def send_email(self, to_email, subject, message, attachment_path=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–ª–æ–∂–µ–Ω–∏–µ–º"""
        try:
            if not self.config['username'] or not self.config['password']:
                logging.warning("Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã")
                return False
                    
            msg = MIMEMultipart()
            msg['From'] = self.config['username']
            msg['To'] = to_email
            msg['Subject'] = subject
            msg.attach(MIMEText(message, 'plain', 'utf-8'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if attachment_path and os.path.exists(attachment_path):
                try:
                    from email.mime.application import MIMEApplication
                    from email.mime.image import MIMEImage
                    from email.mime.audio import MIMEAudio
                    import mimetypes
                    
                    filename = os.path.basename(attachment_path)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                    content_type, _ = mimetypes.guess_type(attachment_path)
                    
                    with open(attachment_path, 'rb') as f:
                        file_data = f.read()
                    
                    if content_type is None:
                        content_type = 'application/octet-stream'
                    
                    main_type, sub_type = content_type.split('/', 1)
                    
                    if main_type == 'image':
                        attachment = MIMEImage(file_data, _subtype=sub_type)
                    elif main_type == 'audio':
                        attachment = MIMEAudio(file_data, _subtype=sub_type)
                    else:
                        attachment = MIMEApplication(file_data)
                    
                    attachment.add_header('Content-Disposition', 'attachment', filename=filename)
                    msg.attach(attachment)
                    
                    logging.info(f"üìé –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ: {filename}")
                    
                except Exception as attach_error:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è: {attach_error}")

            smtp_server = self.config['smtp_server']
            smtp_port = self.config['smtp_port']
            use_tls = self.config.get('use_tls', True)
            
            server = None
            
            try:
                if smtp_port in [465, 587]:
                    if smtp_port == 465:
                        server = smtplib.SMTP_SSL(smtp_server, smtp_port)
                    else:
                        server = smtplib.SMTP(smtp_server, smtp_port)
                        server.starttls()
                else:
                    if use_tls:
                        try:
                            server = smtplib.SMTP_SSL(smtp_server, smtp_port)
                        except:
                            server = smtplib.SMTP(smtp_server, smtp_port)
                            server.starttls()
                    else:
                        server = smtplib.SMTP(smtp_server, smtp_port)
                
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
                server.login(self.config['username'], self.config['password'])
                server.sendmail(self.config['username'], to_email, msg.as_string())
                server.quit()
                
                if attachment_path:
                    logging.info(f"Email —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
                else:
                    logging.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
                return True
                
            except Exception as conn_error:
                if server:
                    try:
                        server.quit()
                    except:
                        pass
                raise conn_error

        except Exception as e:
            error_msg = str(e)
            if "SSL: WRONG_VERSION_NUMBER" in error_msg:
                logging.error(f"SSL –æ—à–∏–±–∫–∞ –¥–ª—è {to_email}: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Ä—Ç 587")
            elif "Authentication" in error_msg or "auth" in error_msg.lower():
                logging.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {to_email}")
            elif "Connection" in error_msg or "connect" in error_msg.lower():
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {to_email}")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {to_email}: {e}")
            return False

class UniversalSenderGUI:
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.config = UniversalSenderConfig()
        self.root = tk.Tk()
        self.root.title("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ v3.1")
        self.root.geometry("700x1100")
        self.root.resizable(True, True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–º
        self.theme_manager = ThemeManager(self.root)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        self.contacts = []
        self.data_df = None
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.sent_count = 0
        self.total_count = 0
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        self.stop_flag = False
        # –í–ª–æ–∂–µ–Ω–∏—è
        self.attachment_file = None
        self.attachment_filename = None
        
        self.create_widgets()
        self.theme_manager.apply_theme()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # === –ó–ê–ì–û–õ–û–í–û–ö ===
        header_frame = ttk.Frame(self.root)
        header_frame.pack(fill='x', padx=10, pady=(10, 0))
        
        title_label = ttk.Label(header_frame, text="üì° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ v3.1", 
                               font=('Arial', 14, 'bold'))
        title_label.pack(side='left')
        
        self.theme_button = ttk.Button(header_frame, text="üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞", 
                                      command=self.toggle_theme)
        self.theme_button.pack(side='right')
        
        # === –§–ê–ô–õ–´ ===
        files_frame = ttk.LabelFrame(self.root, text="üìÅ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö", padding=10)
        files_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—ã–±–æ—Ä –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        data_row = ttk.Frame(files_frame)
        data_row.pack(fill='x', pady=(0, 10))
        
        ttk.Button(data_row, text="üìä –í—ã–±—Ä–∞—Ç—å Excel —Ñ–∞–π–ª", 
                  command=self.select_data_file, width=20).pack(side='left', padx=(0, 10))
        ttk.Button(data_row, text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", 
                  command=self.load_contacts, width=20).pack(side='left', padx=(0, 10))
        
        self.data_label = ttk.Label(data_row, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", foreground="gray")
        self.data_label.pack(side='left', padx=(10, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
        self.contacts_info_label = ttk.Label(files_frame, text="", foreground="blue")
        self.contacts_info_label.pack(pady=5, anchor='w')

        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–ü–†–ê–í–ö–ò ===
        settings_frame = ttk.LabelFrame(self.root, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏", padding=10)
        settings_frame.pack(fill='x', padx=10, pady=5)
        
        # –°–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
        methods_frame = ttk.Frame(settings_frame)
        methods_frame.pack(fill='x', pady=5)
        
        self.send_telegram_var = tk.BooleanVar(value=self.config.config['sending']['send_telegram'])
        self.send_email_var = tk.BooleanVar(value=self.config.config['sending']['send_email'])
        
        ttk.Checkbutton(methods_frame, text="üì± –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Telegram", 
                       variable=self.send_telegram_var).pack(side='left', padx=10)
        ttk.Checkbutton(methods_frame, text="üìß –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ Email", 
                       variable=self.send_email_var).pack(side='left', padx=10)
        
        # === –£–ü–†–ê–í–õ–Ø–Æ–©–ò–ï –ö–ù–û–ü–ö–ò (–ù–û–í–û–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï) ===
        control_buttons_frame = ttk.Frame(settings_frame)
        control_buttons_frame.pack(fill='x', pady=10)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        left_column = ttk.Frame(control_buttons_frame)
        left_column.pack(side='left', fill='y')
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        left_row1 = ttk.Frame(left_column)
        left_row1.pack(fill='x', pady=(0, 5))
        
        ttk.Button(left_row1, text="üîë TG –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", 
                  command=self.show_telegram_auth, width=20).pack(side='left', padx=(0, 10))
        ttk.Button(left_row1, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.apply_all_settings, width=20).pack(side='left')
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        left_row2 = ttk.Frame(left_column)
        left_row2.pack(fill='x')
        
        ttk.Button(left_row2, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å TG", 
                  command=self.clear_telegram_session, width=18).pack(side='left', padx=(0, 10))
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ç–µ—Å—Ç –∏ —Å—Ç–∞—Ç—É—Å
        right_column = ttk.Frame(control_buttons_frame)
        right_column.pack(side='right', fill='y', padx=(20, 0))
        
        ttk.Button(right_column, text="üß™ –¢–µ—Å—Ç Email", 
                  command=self.test_email_connection, width=20).pack(pady=(0, 5))
        ttk.Button(right_column, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", 
                  command=self.update_telegram_status, width=20).pack()
        
        # === –°–¢–ê–¢–£–° TELEGRAM ===
        tg_status_frame = ttk.Frame(settings_frame)
        tg_status_frame.pack(fill='x', pady=5)
        
        ttk.Label(tg_status_frame, text="üì± –°—Ç–∞—Ç—É—Å Telegram:", 
                 font=('Arial', 10, 'bold')).pack(side='left')
        
        self.telegram_status_label = ttk.Label(tg_status_frame, text="‚ùì –ü—Ä–æ–≤–µ—Ä–∫–∞...", 
                                              foreground='orange')
        self.telegram_status_label.pack(side='left', padx=(10, 0))
        
        # === –ó–ê–î–ï–†–ñ–ö–ê ===
        delay_frame = ttk.Frame(settings_frame)
        delay_frame.pack(fill='x', pady=10)
        
        ttk.Label(delay_frame, text="‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏:").pack(side='left')
        
        self.delay_var = tk.DoubleVar(value=self.config.config['sending']['delay_seconds'])
        self.delay_scale = ttk.Scale(delay_frame, from_=0, to=3, variable=self.delay_var, 
                                   orient='horizontal', length=200)
        self.delay_scale.pack(side='left', padx=10)
        
        self.delay_label = ttk.Label(delay_frame, text="1.0 —Å–µ–∫")
        self.delay_label.pack(side='left')
        self.delay_var.trace('w', self.update_delay_label)
        
        # === EMAIL –ù–ê–°–¢–†–û–ô–ö–ò ===
        email_frame = ttk.LabelFrame(settings_frame, text="üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email")
        email_frame.pack(fill='x', pady=10)
        
        # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        provider_frame = ttk.Frame(email_frame)
        provider_frame.pack(fill='x', pady=5)
        
        ttk.Label(provider_frame, text="–ü—Ä–æ–≤–∞–π–¥–µ—Ä:").pack(side='left')
        
        self.email_provider_var = tk.StringVar(value=self.config.config['email']['provider'])
        
        providers = [("Gmail", "gmail"), ("Yandex", "yandex"), ("Mail.ru", "mailru"), 
                    ("Zoho", "zoho"), ("–°–≤–æ–π SMTP", "custom")]
        
        for text, value in providers:
            ttk.Radiobutton(provider_frame, text=text, variable=self.email_provider_var, 
                           value=value, command=self.on_provider_change).pack(side='left', padx=5)
        
        # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        creds_frame = ttk.Frame(email_frame)
        creds_frame.pack(fill='x', pady=5)
        
        ttk.Label(creds_frame, text="Email:").grid(row=0, column=0, sticky='w', padx=5)
        self.email_username_var = tk.StringVar(value=self.config.config['email']['username'])
        ttk.Entry(creds_frame, textvariable=self.email_username_var, width=30).grid(row=0, column=1, padx=5)
        
        ttk.Label(creds_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=1, column=0, sticky='w', padx=5)
        self.email_password_var = tk.StringVar(value=self.config.config['email']['password'])
        ttk.Entry(creds_frame, textvariable=self.email_password_var, show='*', width=30).grid(row=1, column=1, padx=5)
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.custom_smtp_frame = ttk.Frame(email_frame)
        self.custom_smtp_frame.pack(fill='x', pady=5)
        
        ttk.Label(self.custom_smtp_frame, text="SMTP —Å–µ—Ä–≤–µ—Ä:").grid(row=0, column=0, sticky='w', padx=5)
        self.smtp_server_var = tk.StringVar(value=self.config.config['email']['smtp_server'])
        ttk.Entry(self.custom_smtp_frame, textvariable=self.smtp_server_var, width=20).grid(row=0, column=1, padx=5)
        
        ttk.Label(self.custom_smtp_frame, text="–ü–æ—Ä—Ç:").grid(row=0, column=2, sticky='w', padx=5)
        self.smtp_port_var = tk.IntVar(value=self.config.config['email']['smtp_port'])
        ttk.Entry(self.custom_smtp_frame, textvariable=self.smtp_port_var, width=10).grid(row=0, column=3, padx=5)
        
        self.use_tls_var = tk.BooleanVar(value=self.config.config['email']['use_tls'])
        ttk.Checkbutton(self.custom_smtp_frame, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", 
                       variable=self.use_tls_var).grid(row=1, column=0, columnspan=4, sticky='w', pady=5)
        
        self.on_provider_change()
        
        # === –°–û–û–ë–©–ï–ù–ò–ï ===
        message_frame = ttk.LabelFrame(self.root, text="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ", padding=10)
        message_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –¢–µ–º–∞
        subject_frame = ttk.Frame(message_frame)
        subject_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(subject_frame, text="üìù –¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è email):").pack(anchor='w')
        self.subject_var = tk.StringVar(value=self.config.config['message']['subject'])
        ttk.Entry(subject_frame, textvariable=self.subject_var, font=('Arial', 10)).pack(fill='x', pady=5)
        
        # –í–ª–æ–∂–µ–Ω–∏—è
        attachment_frame = ttk.Frame(message_frame)
        attachment_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(attachment_frame, text="üìé –í–ª–æ–∂–µ–Ω–∏–µ (–¥–æ 50MB):").pack(anchor='w')
        
        attachment_control_frame = ttk.Frame(attachment_frame)
        attachment_control_frame.pack(fill='x', pady=5)
        
        ttk.Button(attachment_control_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", 
                  command=self.select_attachment_file, width=20).pack(side='left', padx=(0, 10))
        ttk.Button(attachment_control_frame, text="üóëÔ∏è –£–±—Ä–∞—Ç—å —Ñ–∞–π–ª", 
                  command=self.remove_attachment_file, width=20).pack(side='left')
        
        self.attachment_label = ttk.Label(attachment_control_frame, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", 
                                         foreground="gray")
        self.attachment_label.pack(side='left', padx=(10, 0))
        
        # –¢–µ–∫—Å—Ç
        ttk.Label(message_frame, text="üìÑ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {name}):").pack(anchor='w')
        self.message_text = scrolledtext.ScrolledText(message_frame, height=10, wrap='word',
                                                     font=('Arial', 10))
        self.message_text.pack(fill='both', expand=True, pady=5)
        self.message_text.insert('1.0', self.config.config['message']['template'])
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–û–ô ===
        control_frame = ttk.Frame(self.root)
        control_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Button(control_frame, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", 
                  command=self.start_sending).pack(side='left', padx=5)
        ttk.Button(control_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                  command=self.stop_sending).pack(side='left', padx=5)
        ttk.Button(control_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ", 
                  command=self.save_all_settings).pack(side='right', padx=5)
        ttk.Button(control_frame, text="‚ùì Help", 
                  command=self.show_help_window).pack(side='right', padx=5)
        
        # === –°–¢–ê–¢–£–° –ò –õ–û–ì–ò ===
        status_frame = ttk.LabelFrame(self.root, text="üìä –°—Ç–∞—Ç—É—Å –∏ –ª–æ–≥–∏", padding=10)
        status_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        stats_frame = ttk.Frame(status_frame)
        stats_frame.pack(fill='x', pady=5)
        
        self.stats_label = ttk.Label(stats_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.stats_label.pack(side='left')
        
        self.progress_bar = ttk.Progressbar(stats_frame, mode='determinate')
        self.progress_bar.pack(side='right', fill='x', expand=True, padx=(10, 0))
        
        self.log_text = scrolledtext.ScrolledText(status_frame, height=12, state='disabled')
        self.log_text.pack(fill='both', expand=True, pady=5)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        self.stop_flag = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Telegram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.root.after(1000, self.update_telegram_status)
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        theme_name = self.theme_manager.toggle_theme()
        self.theme_button.config(text=theme_name)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ ScrolledText –≤–∏–¥–∂–µ—Ç–∞–º
        theme = self.theme_manager.get_current_theme()
        try:
            if self.theme_manager.is_dark:
                self.log_text.configure(bg=theme['log_bg'], fg=theme['fg'], 
                                    insertbackground=theme['fg'])
                self.message_text.configure(bg=theme['text_bg'], fg=theme['fg'],
                                        insertbackground=theme['fg'])
            else:
                self.log_text.configure(bg=theme['text_bg'], fg=theme['fg'])
                self.message_text.configure(bg=theme['text_bg'], fg=theme['fg'])
        except:
            pass
        
        # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        self.root.configure(bg=theme['bg'])
        self.root.update_idletasks()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Ñ—Ä–µ–π–º—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        for widget in self.root.winfo_children():
            self._update_widget_theme(widget, theme)
            
    def _update_widget_theme(self, widget, theme):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ tk –≤–∏–¥–∂–µ—Ç—ã
            if isinstance(widget, (tk.Frame, tk.Label)):
                widget.configure(bg=theme['bg'])
                if isinstance(widget, tk.Label):
                    widget.configure(fg=theme['fg'])
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –≤–∏–¥–∂–µ—Ç—ã
            for child in widget.winfo_children():
                self._update_widget_theme(child, theme)
                
        except Exception:
            pass 
    
    def apply_all_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config.config['email']['provider'] = self.email_provider_var.get()
        self.config.config['email']['username'] = self.email_username_var.get()
        self.config.config['email']['password'] = self.email_password_var.get()
        self.config.config['email']['smtp_server'] = self.smtp_server_var.get()
        self.config.config['email']['smtp_port'] = self.smtp_port_var.get()
        self.config.config['email']['use_tls'] = self.use_tls_var.get()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.config.config['sending']['send_telegram'] = self.send_telegram_var.get()
        self.config.config['sending']['send_email'] = self.send_email_var.get()
        self.config.config['sending']['delay_seconds'] = self.delay_var.get()
        
        self.log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    
    def test_email_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            self.apply_all_settings()
            
            smtp_server = self.config.config['email']['smtp_server']
            smtp_port = self.config.config['email']['smtp_port']
            username = self.config.config['email']['username']
            password = self.config.config['email']['password']
            use_tls = self.config.config['email'].get('use_tls', True)
            
            if not username or not password:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
                return
            
            self.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            
            server = None
            if smtp_port == 465:
                server = smtplib.SMTP_SSL(smtp_server, smtp_port)
            else:
                server = smtplib.SMTP(smtp_server, smtp_port)
                if use_tls:
                    server.starttls()
            
            server.login(username, password)
            server.quit()
            
            self.log("üéâ Email —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ email —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ email —Ç–µ—Å—Ç–∞: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
    
    def show_telegram_auth(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram"""
        auth_window = TelegramAuthWindow(self.root, self.config.config, self.theme_manager)
        if auth_window.show_auth():
            self.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram —É—Å–ø–µ—à–Ω–∞!")
            self.config.save_config()
            self.update_telegram_status()
        else:
            self.log("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    def update_telegram_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram —Å–µ—Å—Å–∏–∏"""
        try:
            temp_sender = TelegramSender(self.config.config)
            status = temp_sender.get_session_status()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if "‚úÖ" in status:
                color = 'green'
            elif "‚ö†Ô∏è" in status:
                color = 'orange'
            elif "‚ùå" in status:
                color = 'red'
            else:
                color = 'blue'
            
            self.telegram_status_label.config(text=status, foreground=color)
            
        except Exception as e:
            error_status = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"
            self.telegram_status_label.config(text=error_status, foreground='red')

    def clear_telegram_session(self):
        """–û—á–∏—Å—Ç–∫–∞ Telegram —Å–µ—Å—Å–∏–∏"""
        try:
            session_file = f"{self.config.config['telegram']['session_name']}.session"
            if os.path.exists(session_file):
                os.remove(session_file)
                self.log("üóëÔ∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ Telegram —É–¥–∞–ª–µ–Ω")
                self.update_telegram_status()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
    
    def update_delay_label(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        delay = self.delay_var.get()
        self.delay_label.config(text=f"{delay:.1f} —Å–µ–∫")
    
    def on_provider_change(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        provider = self.email_provider_var.get()
        
        if provider == 'custom':
            self.custom_smtp_frame.pack(fill='x', pady=5)
        else:
            self.custom_smtp_frame.pack_forget()
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if provider in self.config.config['smtp_presets']:
                preset = self.config.config['smtp_presets'][provider]
                self.smtp_server_var.set(preset['smtp_server'])
                self.smtp_port_var.set(preset['smtp_port'])
                self.use_tls_var.set(preset['use_tls'])
    
    def select_data_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        if filename:
            self.data_file = filename
            self.data_label.config(text=os.path.basename(filename))
    
    def load_contacts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not hasattr(self, 'data_file'):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
                return
            
            self.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
            
            self.data_df = DataProcessor.load_excel_file(self.data_file)
            self.contacts = DataProcessor.process_contacts(self.data_df)
            
            self.total_count = len(self.contacts)
            self.sent_count = 0
            self.update_stats()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
            telegram_count = sum(1 for c in self.contacts if c['telegram'])
            email_count = sum(1 for c in self.contacts if c['email'])
            
            info_text = f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.contacts)} | üì± TG: {telegram_count} | üìß Email: {email_count}"
            self.contacts_info_label.config(text=info_text)
            
            self.log(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.contacts)} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}"
            self.log(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
    
    def save_all_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.apply_all_settings()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.config.config['message']['subject'] = self.subject_var.get()
        self.config.config['message']['template'] = self.message_text.get('1.0', 'end-1c')
        
        self.config.save_config()
        self.log("üíæ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        
        self.log_text.config(state='normal')
        self.log_text.insert('end', log_message + '\n')
        self.log_text.see('end')
        self.log_text.config(state='disabled')
        
        logging.info(message)
        self.root.update()
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_text = f"üìä –ö–æ–Ω—Ç–∞–∫—Ç—ã: {self.total_count} | ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.sent_count}"
        self.stats_label.config(text=stats_text)
        
        if self.total_count > 0:
            progress = (self.sent_count / self.total_count) * 100
            self.progress_bar['value'] = progress
    
    def select_attachment_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è",
            filetypes=[
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.gif *.bmp"),
                ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.doc *.docx *.txt *.rtf"),
                ("–ê—Ä—Ö–∏–≤—ã", "*.zip *.rar *.7z"),
                ("–í–∏–¥–µ–æ", "*.mp4 *.avi *.mkv *.mov"),
                ("–ê—É–¥–∏–æ", "*.mp3 *.wav *.flac *.ogg")
            ]
        )
        
        if filename:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            try:
                file_size = os.path.getsize(filename)
                max_size = 50 * 1024 * 1024  # 50MB –≤ –±–∞–π—Ç–∞—Ö
                
                if file_size > max_size:
                    size_mb = file_size / (1024 * 1024)
                    messagebox.showerror("–û—à–∏–±–∫–∞", 
                                       f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {size_mb:.1f}MB\n"
                                       f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB")
                    return
                
                self.attachment_file = filename
                self.attachment_filename = os.path.basename(filename)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                size_mb = file_size / (1024 * 1024)
                if size_mb < 1:
                    size_text = f"{file_size / 1024:.1f}KB"
                else:
                    size_text = f"{size_mb:.1f}MB"
                
                display_text = f"{self.attachment_filename} ({size_text})"
                self.attachment_label.config(text=display_text, foreground="green")
                
                self.log(f"üìé –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {self.attachment_filename} ({size_text})")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    def remove_attachment_file(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è"""
        if self.attachment_file:
            self.attachment_file = None
            self.attachment_filename = None
            self.attachment_label.config(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", foreground="gray")
            self.log("üóëÔ∏è –í–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§–∞–π–ª –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω")
    def start_sending(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.contacts:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
            return
        
        if not self.send_telegram_var.get() and not self.send_email_var.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        self.apply_all_settings()
        
        self.stop_flag = False
        self.sent_count = 0
        self.update_stats()
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.run_sending)
        thread.daemon = True
        thread.start()
    
    def stop_sending(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.stop_flag = True
        self.log("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
    
    def run_sending(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            asyncio.run(self.send_notifications())
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    async def send_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        message_template = self.message_text.get('1.0', 'end-1c')
        delay_seconds = self.delay_var.get()
        subject = self.subject_var.get()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
        telegram_sender = None
        email_sender = None
        
        if self.send_telegram_var.get():
            telegram_sender = TelegramSender(self.config.config)
            if not await telegram_sender.initialize():
                self.log("‚ö†Ô∏è Telegram –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
                self.root.after(0, self.show_auth_prompt)
                return
        
        if self.send_email_var.get():
            email_sender = EmailSender(self.config.config)
        
        attachment_info = ""
        if self.attachment_file:
            attachment_info = f" —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º ({self.attachment_filename})"
        
        self.log(f"üöÄ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {len(self.contacts)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π{attachment_info}")
        
        for i, contact in enumerate(self.contacts):
            if self.stop_flag:
                break
            
            try:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = message_template.format(name=contact['name'])
                
                sent_methods = []
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                if telegram_sender and contact['telegram']:
                    if await telegram_sender.send_message_with_attachment(
                        contact['telegram'], message, self.attachment_file):
                        sent_methods.append("TG")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Email
                if email_sender and contact['email']:
                    personalized_subject = subject.format(name=contact['name']) if '{name}' in subject else subject
                    if email_sender.send_email(contact['email'], personalized_subject, 
                                             message, self.attachment_file):
                        sent_methods.append("Email")
                
                if sent_methods:
                    self.sent_count += 1
                    methods_text = "/".join(sent_methods)
                    self.log(f"‚úÖ {contact['name']} ({methods_text})")
                else:
                    self.log(f"‚ùå {contact['name']} - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
                
                self.update_stats()
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                if delay_seconds > 0:
                    await asyncio.sleep(delay_seconds)
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {contact['name']}: {e}")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if telegram_sender:
            await telegram_sender.close()
        
        if self.stop_flag:
            self.log("‚èπ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        else:
            self.log(f"üéâ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.sent_count}/{self.total_count}")
    
    def show_auth_prompt(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telegram"""
        response = messagebox.askyesno("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram", 
                                      "Telegram –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–µ–π—á–∞—Å?")
        if response:
            self.show_telegram_auth()
    
    def show_help_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ–º–æ—â–∏"""
        if not hasattr(self, 'help_window'):
            self.help_window = HelpWindow(self.root, self.theme_manager)
        self.help_window.show_help()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

class HelpWindow:
    """–û–∫–Ω–æ –ø–æ–º–æ—â–∏ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º email –∞–≤—Ç–æ—Ä–∞"""
    
    def __init__(self, parent, theme_manager):
        self.parent = parent
        self.theme_manager = theme_manager
        self.window = None
        self.animation_running = False
        self.original_email = "fxranxklin@proton.me"
        
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ–º–æ—â–∏"""
        if self.window and self.window.winfo_exists():
            self.window.lift()
            return
            
        self.window = tk.Toplevel(self.parent)
        self.window.title("üìñ –°–ø—Ä–∞–≤–∫–∞ - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ v3.1")
        self.window.geometry("650x700")
        self.window.resizable(True, True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        theme = self.theme_manager.get_current_theme()
        self.window.configure(bg=theme['bg'])
        self.window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.create_content()
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
        self.start_animation()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.window.protocol("WM_DELETE_WINDOW", self.on_close)

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ"""
        self.window.transient(self.parent)
        self.window.grab_set()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ –æ–∫–Ω–∞
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        
        x = (screen_width - 60) // 2
        y = (screen_height - 700) // 2
        
        self.window.geometry(f"540x970+{x}+{y}")

    def create_content(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–º–æ—â–∏"""
        main_frame = ttk.Frame(self.window)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill='x', pady=(0, 20))
        
        title_label = ttk.Label(title_frame, text="üì° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", 
                               font=('Arial', 16, 'bold'))
        title_label.pack()
        
        version_label = ttk.Label(title_frame, text="–í–µ—Ä—Å–∏—è 3.1 FIXED", 
                                 font=('Arial', 10), foreground='gray')
        version_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = """üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
üì± –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∏ Email
üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–æ–≤ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö email –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
üåô –¢–µ–º–Ω–∞—è –∏ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

üîß –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫: Username, FIO, Email
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram —Å–µ—Å—Å–∏–∏
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ –†–µ–≥—É–ª–∏—Ä—É–µ–º–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

‚öôÔ∏è –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
1. –í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
2. –î–ª—è Telegram: –Ω–∞–∂–º–∏—Ç–µ "üîë TG –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
3. –î–ª—è Email: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "üß™ –¢–µ—Å—Ç Email"
4. –ù–∞–∂–º–∏—Ç–µ "üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–æ–π "‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å"

üìû –ü–û–î–î–ï–†–ñ–ö–ê:
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤–Ω–∏–∑—É –ø—Ä–æ–≥—Ä–∞–º–º—ã.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—à–∏–±–æ–∫."""
        
        info_label = ttk.Label(main_frame, text=info_text, 
                              font=('Arial', 10), justify='left')
        info_label.pack(pady=(0, 20))
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email –∞–≤—Ç–æ—Ä–∞
        author_frame = ttk.Frame(main_frame)
        author_frame.pack(pady=20)
        
        ttk.Label(author_frame, text="üë®‚Äçüíª –ê–≤—Ç–æ—Ä:", font=('Arial', 12, 'bold')).pack()
        
        email_frame = ttk.Frame(author_frame)
        email_frame.pack(pady=10)
        
        theme = self.theme_manager.get_current_theme()
        self.email_canvas = tk.Canvas(email_frame, width=400, height=50, 
                                    bg=theme['bg'], highlightthickness=0)
        self.email_canvas.pack()
        
        self.init_letter_positions()
        
        # –°–µ–∫—Ü–∏—è –¥–æ–Ω–∞—Ç–æ–≤
        self.create_donation_section(main_frame)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(main_frame, text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", command=self.on_close).pack(pady=20)
        
    def create_donation_section(self, parent_frame):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–æ–Ω–∞—Ç–æ–≤"""
        donation_frame = ttk.LabelFrame(parent_frame, text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", padding=15)
        donation_frame.pack(fill='x', pady=(20, 10))
        
        ttk.Label(donation_frame, 
                 text="‚òï –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–ª–µ–∑–Ω–æ–π, –º–æ–∂–µ—Ç–µ —É–≥–æ—Å—Ç–∏—Ç—å –∫–æ—Ñ–µ:", 
                 font=('Arial', 10), justify='center').pack(pady=(0, 15))
        
        # USDT –∞–¥—Ä–µ—Å
        usdt_frame = ttk.Frame(donation_frame)
        usdt_frame.pack(fill='x', pady=8)
        
        ttk.Label(usdt_frame, text="üü¢ USDT (TRC20):", font=('Arial', 10, 'bold')).pack(anchor='w')
        
        usdt_address = "TSE6qB5efLq3bVuTrnU3FRvtEYQ9ktjUj4"
        theme = self.theme_manager.get_current_theme()
        usdt_label = tk.Label(usdt_frame, text=usdt_address, 
                             font=('Consolas', 10, 'underline'), 
                             fg='blue', cursor='hand2', bg=theme['bg'])
        usdt_label.pack(anchor='w', pady=(2, 0))
        
        def copy_usdt(event=None):
            self.window.clipboard_clear()
            self.window.clipboard_append(usdt_address)
            original_text = usdt_label.cget('text')
            usdt_label.config(text="‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", fg='green')
            self.window.after(2000, lambda: usdt_label.config(text=original_text, fg='blue'))
        
        usdt_label.bind("<Button-1>", copy_usdt)
        
        # BTC –∞–¥—Ä–µ—Å
        btc_frame = ttk.Frame(donation_frame)
        btc_frame.pack(fill='x', pady=8)
        
        ttk.Label(btc_frame, text="üü† Bitcoin (BTC):", font=('Arial', 10, 'bold')).pack(anchor='w')
        
        btc_address = "1HS2bhG8VfMYaswFR3ww1yuXc9kb3hPteJ"
        btc_label = tk.Label(btc_frame, text=btc_address, 
                            font=('Consolas', 10, 'underline'), 
                            fg='blue', cursor='hand2', bg=theme['bg'])
        btc_label.pack(anchor='w', pady=(2, 0))
        
        def copy_btc(event=None):
            self.window.clipboard_clear()
            self.window.clipboard_append(btc_address)
            original_text = btc_label.cget('text')
            btc_label.config(text="‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", fg='green')
            self.window.after(2000, lambda: btc_label.config(text=original_text, fg='blue'))
        
        btc_label.bind("<Button-1>", copy_btc)
        
        ttk.Label(donation_frame, text="üëÜ –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", 
                 font=('Arial', 9, 'italic'), foreground='gray').pack(pady=(10, 5))
        
    def init_letter_positions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –±—É–∫–≤ email"""
        self.letter_positions = []
        email_length = len(self.original_email)
        canvas_width = 400
        
        total_width = email_length * 15
        start_x = (canvas_width - total_width) // 2
        
        for i, char in enumerate(self.original_email):
            pos = {
                'char': char,
                'x': start_x + i * 15,
                'y': 25,
                'index': i
            }
            self.letter_positions.append(pos)
        
        self.animation_time = 0

    def get_rainbow_color(self, position, time_offset=0):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–¥—É–∂–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
        hue = (position * 0.1 + time_offset) % 1.0
        r, g, b = colorsys.hsv_to_rgb(hue, 0.8, 0.9)
        return f"#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}"
    
    def start_animation(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ email"""
        if not self.animation_running:
            self.animation_running = True
            self.animate_letters()
    
    def animate_letters(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–¥—É–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –±—É–∫–≤ email"""
        if not self.animation_running or not self.window or not self.window.winfo_exists():
            return
        
        self.email_canvas.delete("all")
        self.animation_time += 0.05
        
        for i, letter in enumerate(self.letter_positions):
            color = self.get_rainbow_color(i, self.animation_time)
            y_offset = math.sin(self.animation_time * 2 + i * 0.3) * 2
            
            self.email_canvas.create_text(
                letter['x'], 
                letter['y'] + y_offset, 
                text=letter['char'], 
                font=('Consolas', 16, 'bold'), 
                fill=color, 
                anchor='center'
            )
        
        self.window.after(50, self.animate_letters)
    
    def on_close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ–º–æ—â–∏"""
        self.animation_running = False
        if self.window:
            self.window.destroy()
            self.window = None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ v3.1 FIXED")
    print("=" * 40)
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("   ‚Ä¢ –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏")
    print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å Telegram —Å–µ—Å—Å–∏–µ–π")
    print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–æ–≤")
    print("   ‚Ä¢ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ GUI...")
    
    app = UniversalSenderGUI()
    app.run()

if __name__ == "__main__":
    main()