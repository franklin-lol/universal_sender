import asyncio
import logging
import os
from datetime import datetime
from getpass import getpass

from pyrogram import Client
from pyrogram.errors import (
    FloodWait,
    PasswordHashInvalid,
    PhoneCodeExpired,
    PhoneCodeInvalid,
    PhoneNumberInvalid,
    SessionPasswordNeeded,
    BadRequest,
)

LOG_FILE = "session_creator.log"

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(LOG_FILE, encoding="utf-8"),
            logging.StreamHandler()
        ],
    )
    logging.info("=== Pyrogram Session Creator ===")

async def main():
    setup_logging()

    default_session = f"pyro_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    session_name = input(f"–ò–º—è —Å–µ—Å—Å–∏–∏ [{default_session}]: ").strip() or default_session

    api_id = int(input("API ID: ").strip())
    api_hash = input("API HASH: ").strip()
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω (—Å +, –Ω–∞–ø—Ä. +71234567890): ").strip()

    logging.info(f"–°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç: session='{session_name}'")
    app = Client(session_name, api_id=api_id, api_hash=api_hash)

    try:
        await app.connect()

        # --- –®–∞–≥ 1: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ ---
        logging.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        sent_code = await app.send_code(phone)
        print("üì≤ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å Telegram –∏–ª–∏ SMS.")

        # --- –®–∞–≥ 2: –≤–≤–æ–¥–∏–º –∫–æ–¥ ---
        code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram/SMS: ").strip().replace(" ", "")
        try:
            await app.sign_in(phone, sent_code.phone_code_hash, code)
        except SessionPasswordNeeded:
            pwd = getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            try:
                await app.check_password(pwd)
            except PasswordHashInvalid:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA")
                return

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ ---
        me = await app.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∫–∞–∫: {me.first_name} (id: {me.id})")

    except PhoneNumberInvalid:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    except PhoneCodeInvalid:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except PhoneCodeExpired:
        print("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")
    except FloodWait as e:
        print(f"‚è≥ Flood wait: –ø–æ–¥–æ–∂–¥–∏ {e.value} —Å–µ–∫.")
    except BadRequest as e:
        print(f"‚ùå BadRequest: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        try:
            await app.disconnect()
        except:
            pass

        session_file = f"{session_name}.session"
        if os.path.exists(session_file):
            print(f"üì¶ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {os.path.abspath(session_file)}")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω.")

if __name__ == "__main__":
    asyncio.run(main())
